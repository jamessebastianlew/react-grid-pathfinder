{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nlogloglogn/dev/web/react/canvas/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './components/Canvas/Canvas';\n\nclass Grid {\n  constuctor(rows, cols, width, colours = [\"#FFFFFF\", \"#000000\"]) {\n    this.rows = rows;\n    this.cols = cols;\n    this.width = width;\n    console.log(this.grid);\n    this.grid = new Array(rows).fill(0).map(() => new Array(cols).fill(0));\n  }\n\n  getGrid() {\n    return this.grid;\n  }\n\n  setVal(row, col, val) {\n    this.grid[row][col] = val;\n  }\n\n  getVal(row, col) {\n    return this.grid[row][col];\n  }\n\n  getCol(row, col) {\n    return this.colours[Math.min(this.grid[row][col], this.colours.length - 1)];\n  }\n\n  getPos(row, col) {\n    return [this.row * this.width, this.col * this.width];\n  }\n\n  render(context, fc = null) {\n    const n = this.rows,\n          m = this.cols;\n\n    for (let i = 0; i < n; ++i) for (let j = 0; j < m; ++j) {\n      context.fillStyle = this.getCol(i, j);\n      context.fillRect(...this.getPos(i, j), this.width, this.width);\n    }\n  }\n\n}\n\nconst board = new Grid(10, 10, 10);\nconsole.log(board);\nboard.setVal(0, 0, 1);\nboard.printGrid();\n\nconst draw = (context, fc) => {\n  context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n  board.render(context);\n};\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Canvas, {\n  draw: draw\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/home/nlogloglogn/dev/web/react/canvas/src/index.js"],"names":["React","ReactDOM","Canvas","Grid","constuctor","rows","cols","width","colours","console","log","grid","Array","fill","map","getGrid","setVal","row","col","val","getVal","getCol","Math","min","length","getPos","render","context","fc","n","m","i","j","fillStyle","fillRect","board","printGrid","draw","clearRect","window","innerWidth","innerHeight","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport Canvas from './components/Canvas/Canvas';\n\nclass Grid {\n    constuctor(rows, cols, width, colours = [\"#FFFFFF\", \"#000000\"]) {\n        this.rows = rows; this.cols = cols; this.width = width;\n        console.log(this.grid);\n        this.grid = (new Array(rows)).fill(0).map(() => (new Array(cols)).fill(0));\n    }\n    \n    getGrid() { return this.grid; }\n    setVal(row, col, val) {\n        this.grid[row][col] = val;\n    }\n    getVal(row, col) { return this.grid[row][col]; }\n\n    getCol(row, col) {\n        return this.colours[Math.min(this.grid[row][col], this.colours.length-1)];\n    }\n\n    getPos(row, col) {\n        return [this.row * this.width, this.col * this.width];\n    }\n\n    render(context, fc=null) {\n        const n = this.rows, m = this.cols;\n        for(let i=0; i<n; ++i) for(let j=0; j<m; ++j) {\n            context.fillStyle = this.getCol(i, j);\n            context.fillRect(...this.getPos(i, j), this.width, this.width);\n        }\n    }\n}\n\n\nconst board = new Grid(10, 10, 10);\nconsole.log(board);\nboard.setVal(0,0,1);\nboard.printGrid();\n\nconst draw = (context, fc) => {\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    board.render(context);\n};\n\nReactDOM.render(<Canvas draw={draw} />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}