{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nlogloglogn/dev/web/react/canvas/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './components/Canvas/Canvas';\n\nclass Grid {\n  constructor(rows, cols, width, colours = ['#FFFFFF', '#000000']) {\n    this.rows = rows;\n    this.cols = cols;\n    this.width = width;\n    this.colours = colours;\n    this.grid = new Array(rows).fill(0).map(() => new Array(cols).fill(0));\n  }\n\n  getGrid() {\n    return this.grid;\n  }\n\n  getVal(row, col) {\n    return this.grid[row][col];\n  }\n\n  setVal(row, col, val) {\n    this.grid[row][col] = val;\n  }\n\n  getColour(row, col) {\n    return this.colours[Math.min(this.colours.length - 1, this.grid[row][col])];\n  }\n\n  getPos(row, col) {\n    return [row * this.width, col * this.width];\n  }\n\n  render(context, fc = null) {\n    const n = this.rows,\n          m = this.cols;\n\n    for (let i = 0; i < n; ++i) for (let j = 0; j < m; ++j) {\n      context.fillStyle = this.getColour(i, j);\n      context.fillRect(...this.getPos(i, j), this.width, this.width);\n    }\n  }\n\n  printGrid() {\n    const n = this.rows;\n    const m = this.cols;\n    let output = \"\";\n\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < m; ++j) output += this.grid[i][j] + ' ';\n\n      output += '\\n';\n    }\n\n    console.log(output);\n  }\n\n}\n\n;\nconst board = new Grid(10, 10, 10);\nboard.printGrid();\n\nconst draw = (context, fc) => {\n  context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n  board.render(context);\n};\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Canvas, {\n  draw: draw\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 51,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/home/nlogloglogn/dev/web/react/canvas/src/index.js"],"names":["React","ReactDOM","Canvas","Grid","constructor","rows","cols","width","colours","grid","Array","fill","map","getGrid","getVal","row","col","setVal","val","getColour","Math","min","length","getPos","render","context","fc","n","m","i","j","fillStyle","fillRect","printGrid","output","console","log","board","draw","clearRect","window","innerWidth","innerHeight","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport Canvas from './components/Canvas/Canvas';\n\nclass Grid {\n    constructor(rows, cols, width, colours=['#FFFFFF', '#000000']) {\n        this.rows = rows;\n        this.cols = cols;\n        this.width = width;\n        this.colours = colours;\n        this.grid = (new Array(rows)).fill(0).map(() => (new Array(cols)).fill(0));\n    }\n\n    getGrid() { return this.grid; }\n    getVal(row, col) { return this.grid[row][col]; }\n    setVal(row, col, val) { this.grid[row][col] = val; }\n    getColour(row, col) { return this.colours[Math.min(this.colours.length-1, this.grid[row][col])]; }\n    getPos(row, col) { return [row * this.width, col * this.width]; }\n\n    render(context, fc=null) {\n        const n = this.rows, m = this.cols;\n        for(let i=0; i<n; ++i) for(let j=0; j<m; ++j) {\n            context.fillStyle = this.getColour(i, j);\n            context.fillRect(...this.getPos(i, j), this.width, this.width);\n        }\n    };\n\n    printGrid() {\n        const n = this.rows;\n        const m = this.cols;\n        let output = \"\";\n        for(let i=0; i<n; ++i) {\n            for(let j=0; j<m; ++j) output += this.grid[i][j] + ' ';\n            output += '\\n';\n        }\n        console.log(output);\n    };\n};\n\nconst board = new Grid(10, 10, 10);\nboard.printGrid();\n\nconst draw = (context, fc) => {\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    board.render(context);\n};\n\nReactDOM.render(<Canvas draw={draw} />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}