{"ast":null,"code":"import findPath from './findPath';\n\nclass Grid {\n  constructor(rows, cols, width, colours = [\"#FFFFFF\", \"#000000\"]) {\n    this.rows = rows;\n    this.cols = cols;\n    this.width = width;\n    this.colours = colours;\n    this.grid = new Array(this.rows).fill(0).map(() => new Array(this.cols).fill(0));\n  }\n\n  getGrid() {\n    return this.grid;\n  }\n\n  setVal(row, col, val) {\n    this.grid[row][col] = val;\n  }\n\n  getVal(row, col) {\n    return this.grid[row][col];\n  }\n\n  getCol(row, col) {\n    return this.colours[Math.min(this.grid[row][col], this.colours.length - 1)];\n  }\n\n  getPos(row, col) {\n    return [this.width * col, this.width * row];\n  }\n\n  render(context, fc = null) {\n    const n = this.rows,\n          m = this.cols;\n\n    for (let i = 0; i < n; ++i) for (let j = 0; j < m; ++j) {\n      context.fillStyle = this.getCol(i, j);\n      context.fillRect(...this.getPos(i, j), this.width, this.width);\n    }\n  }\n\n  printGrid() {\n    const n = this.rows,\n          m = this.cols;\n    let output = '';\n\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < m; ++j) output += this.grid[i][j] + ' ';\n\n      output += '\\n';\n    }\n\n    console.log(output);\n  }\n\n}\n\nexport default Grid;\nexport { findPath };","map":{"version":3,"sources":["/home/nlogloglogn/dev/web/react/canvas/src/classes/Grid/Grid.js"],"names":["findPath","Grid","constructor","rows","cols","width","colours","grid","Array","fill","map","getGrid","setVal","row","col","val","getVal","getCol","Math","min","length","getPos","render","context","fc","n","m","i","j","fillStyle","fillRect","printGrid","output","console","log"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,EAAoBC,OAAO,GAAG,CAAC,SAAD,EAAY,SAAZ,CAA9B,EAAsD;AAC7D,SAAKH,IAAL,GAAYA,IAAZ;AAAkB,SAAKC,IAAL,GAAYA,IAAZ;AAAkB,SAAKC,KAAL,GAAaA,KAAb;AAAoB,SAAKC,OAAL,GAAeA,OAAf;AACxD,SAAKC,IAAL,GAAa,IAAIC,KAAJ,CAAU,KAAKL,IAAf,CAAD,CAAuBM,IAAvB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,MAAO,IAAIF,KAAJ,CAAU,KAAKJ,IAAf,CAAD,CAAuBK,IAAvB,CAA4B,CAA5B,CAAzC,CAAZ;AACH;;AAEDE,EAAAA,OAAO,GAAG;AAAE,WAAO,KAAKJ,IAAZ;AAAmB;;AAC/BK,EAAAA,MAAM,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgB;AAAE,SAAKR,IAAL,CAAUM,GAAV,EAAeC,GAAf,IAAsBC,GAAtB;AAA4B;;AACpDC,EAAAA,MAAM,CAACH,GAAD,EAAMC,GAAN,EAAW;AAAE,WAAO,KAAKP,IAAL,CAAUM,GAAV,EAAeC,GAAf,CAAP;AAA6B;;AAEhDG,EAAAA,MAAM,CAACJ,GAAD,EAAMC,GAAN,EAAW;AACb,WAAO,KAAKR,OAAL,CAAaY,IAAI,CAACC,GAAL,CAAS,KAAKZ,IAAL,CAAUM,GAAV,EAAeC,GAAf,CAAT,EAA8B,KAAKR,OAAL,CAAac,MAAb,GAAoB,CAAlD,CAAb,CAAP;AACH;;AAEDC,EAAAA,MAAM,CAACR,GAAD,EAAMC,GAAN,EAAW;AACb,WAAO,CAAC,KAAKT,KAAL,GAAaS,GAAd,EAAmB,KAAKT,KAAL,GAAaQ,GAAhC,CAAP;AACH;;AAEDS,EAAAA,MAAM,CAACC,OAAD,EAAUC,EAAE,GAAC,IAAb,EAAmB;AACrB,UAAMC,CAAC,GAAG,KAAKtB,IAAf;AAAA,UAAqBuB,CAAC,GAAG,KAAKtB,IAA9B;;AACA,SAAI,IAAIuB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,CAAf,EAAkB,EAAEE,CAApB,EAAuB,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,CAAf,EAAkB,EAAEE,CAApB,EAAuB;AAC1CL,MAAAA,OAAO,CAACM,SAAR,GAAoB,KAAKZ,MAAL,CAAYU,CAAZ,EAAeC,CAAf,CAApB;AACAL,MAAAA,OAAO,CAACO,QAAR,CAAiB,GAAG,KAAKT,MAAL,CAAYM,CAAZ,EAAeC,CAAf,CAApB,EAAuC,KAAKvB,KAA5C,EAAmD,KAAKA,KAAxD;AACH;AACJ;;AAED0B,EAAAA,SAAS,GAAG;AACR,UAAMN,CAAC,GAAG,KAAKtB,IAAf;AAAA,UAAqBuB,CAAC,GAAG,KAAKtB,IAA9B;AACA,QAAI4B,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIL,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,CAAf,EAAkB,EAAEE,CAApB,EAAuB;AACnB,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,CAAf,EAAkB,EAAEE,CAApB,EAAuBI,MAAM,IAAI,KAAKzB,IAAL,CAAUoB,CAAV,EAAaC,CAAb,IAAkB,GAA5B;;AACvBI,MAAAA,MAAM,IAAI,IAAV;AACH;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH;;AAlCM;;AAqCX,eAAe/B,IAAf;AACA,SAASD,QAAT","sourcesContent":["import findPath from './findPath';\n\nclass Grid {\n    constructor(rows, cols, width, colours = [\"#FFFFFF\", \"#000000\"]) {\n        this.rows = rows; this.cols = cols; this.width = width; this.colours = colours;\n        this.grid = (new Array(this.rows)).fill(0).map(() => (new Array(this.cols)).fill(0));\n    }\n    \n    getGrid() { return this.grid; }\n    setVal(row, col, val) { this.grid[row][col] = val; }\n    getVal(row, col) { return this.grid[row][col]; }\n\n    getCol(row, col) {\n        return this.colours[Math.min(this.grid[row][col], this.colours.length-1)];\n    }\n\n    getPos(row, col) {\n        return [this.width * col, this.width * row];\n    }\n\n    render(context, fc=null) {\n        const n = this.rows, m = this.cols;\n        for(let i=0; i<n; ++i) for(let j=0; j<m; ++j) {\n            context.fillStyle = this.getCol(i, j);\n            context.fillRect(...this.getPos(i, j), this.width, this.width);\n        }\n    }\n\n    printGrid() {\n        const n = this.rows, m = this.cols;\n        let output = '';\n        for(let i=0; i<n; ++i) {\n            for(let j=0; j<m; ++j) output += this.grid[i][j] + ' ';\n            output += '\\n';\n        }\n        console.log(output);\n    }\n}\n\nexport default Grid;\nexport { findPath };\n"]},"metadata":{},"sourceType":"module"}